// Injected types by build.js
export type VarInt = number;
export type VarLong = bigint;
export type ZigZag = number;
export type ZigZong = bigint;
export type LU16 = number;
export type LI32 = number;
export type LF32 = number;
export type LittleString = string;
export type LU64 = bigint;
/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Vec3F {
  x: LF32
  y: LF32
  z: LF32
}
export interface Vec2F {
  x: LF32
  z: LF32
}
export interface LoginPacket {
  protocolVersion: number
  tokens: LoginTokens
}
export interface LoginTokens {
  identity: LittleString
  client: LittleString
}
export interface PlayStatusPacket {
  status: PlayStatus
}
export const enum PlayStatus {
  LoginSuccess = 0,
  FailedClient = 1,
  FailedSpawn = 2,
  PlayerSpawn = 3,
  FailedInvalidTenant = 4,
  FailedVanillaEdu = 5,
  FailedEduVanilla = 6,
  FailedServerFull = 7,
  FailedEditorVanillaMismatch = 8,
  FailedVanillaEditorMismatch = 9
}
export interface ServerToClientHandshakePacket {
  token: string
}
export interface ClientToServerHandshakePacket {
  
}
export interface DisconnectPacket {
  hideDisconnectScreen: boolean
  message: string
}
export interface ResourcePacksInfoPacket {
  mustAccept: boolean
  hasScripts: boolean
  forceServerPacks: boolean
  behaviourPacks: Array<BehaviourPackInfo>
  resourcePacks: Array<ResourcePackInfo>
}
export interface BehaviourPackInfo {
  uuid: string
  version: string
  size: LU64
  contentKey: string
  subPackName: string
  contentIdentity: string
  hasScripts: boolean
}
export interface ResourcePackInfo {
  uuid: string
  version: string
  size: LU64
  contentKey: string
  subPackName: string
  contentIdentity: string
  hasScripts: boolean
  rtxEnabled: boolean
}
export interface ResourcePacksStackPacket {
  mustAccept: boolean
  behaviourPacks: Array<PackIdVersion>
  resourcePacks: Array<PackIdVersion>
  gameVersion: string
  experiments: Array<Experiment>
  experimentsPreviouslyUsed: boolean
}
export interface PackIdVersion {
  uuid: string
  version: string
  name: string
}
export interface Experiment {
  name: string
  enabled: boolean
}
export interface StartGamePacket {
  entityId: ZigZong
  runtimeEntityId: VarLong
  playerGamemode: GameMode
  playerPosition: Vec3F
  playerRotation: Vec2F
  seed: LU64
  biomeType: LI16
  biomeName: string
  dimension: Dimension
  generator: ZigZag
  worldGamemode: GameMode
  difficulty: ZigZag
  spawnPosition: BlockCoordinates
  achievementsDisabled: boolean
  editorWorld: boolean
  createdInEditor: boolean
  dayCycleStopTime: ZigZag
  eduOffer: ZigZag
  eduFeaturesEnabled: boolean
  eduProductId: string
  rainLevel: LF32
  lightningLevel: LF32
  confirmedPlatformLockedContent: boolean
  multiplayerGame: boolean
  broadcastToLan: boolean
  xblBroadcastMode: VarInt
  platformBroadcastMode: VarInt
  enableCommands: boolean
  texturePacksRequired: boolean
}
export const enum GameMode {
  Survival = 0,
  Creative = 1,
  Adventure = 2,
  SurvivalSpectator = 3,
  CreativeSpectator = 4,
  Fallback = 5,
  Spectator = 6
}
export const enum Dimension {
  Overworld = 0,
  Nether = 1,
  End = 2
}
export interface BlockCoordinates {
  x: ZigZag
  y: VarInt
  z: ZigZag
}
export interface GameRule {
  name: string
  editable: boolean
  fieldType: GameRuleType
}
export const enum GameRuleType {
  Bool = 1,
  Int = 2,
  Float = 3
}
export interface NetworkSettingsPacket {
  compressionThreshold: LU16
  compressionAlgorithm: CompressionAlgorithm
  clientThrottle: boolean
  clientThrottleThreshold: number
  clientThrottleScalar: LF32
}
export const enum CompressionAlgorithm {
  Deflate = 0,
  Snappy = 1
}
export interface RequestNetworkSettingsPacket {
  protocolVersion: number
}
export const enum Packet {
  Login = 1,
  PlayStatus = 2,
  ServerToClientHandshake = 3,
  ClientToServerHandshake = 4,
  Disconnect = 5,
  ResourcePacksInfo = 6,
  ResourcePacksStack = 7,
  StartGame = 11,
  NetworkSettings = 143,
  RequestNetworkSettings = 193
}

/**
 * Injected during post build. Helps TypeScript link enum to packet type.
 */
export interface PacketEnumToPacketInjection {
  [Packet.Login]: LoginPacket;
  [Packet.PlayStatus]: PlayStatusPacket;
  [Packet.ServerToClientHandshake]: ServerToClientHandshakePacket;
  [Packet.ClientToServerHandshake]: ClientToServerHandshakePacket;
  [Packet.Disconnect]: DisconnectPacket;
  [Packet.ResourcePacksInfo]: ResourcePacksInfoPacket;
  [Packet.ResourcePacksStack]: ResourcePacksStackPacket;
  [Packet.StartGame]: StartGamePacket;
  [Packet.NetworkSettings]: NetworkSettingsPacket;
  [Packet.RequestNetworkSettings]: RequestNetworkSettingsPacket;
}

// Updated by build.js
export function serialize<T extends Packet>(id: T, data: PacketEnumToPacketInjection[T]): Buffer;

// Updated by build.js
export function deserialize<T extends Packet>(id: T, data: Buffer): PacketEnumToPacketInjection[T];
export function getPacketId(data: Buffer): number
export function framePackets(packets: Array<Buffer>): Buffer
export function unframePackets(data: Buffer): Array<Buffer>
export function makeMotd(motd: string, protocolVersion: number, version: string, currentPlayers: number, maxPlayers: number, serverId: string, worldName: string, gamemode: string, gamemodeId: number, portv4: number, portv6: number): Buffer
